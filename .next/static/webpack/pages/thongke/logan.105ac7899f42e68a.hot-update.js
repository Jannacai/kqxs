"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/thongke/logan",{

/***/ "(pages-dir-browser)/./pages/api/kqxs/kqxsMN.js":
/*!**********************************!*\
  !*** ./pages/api/kqxs/kqxsMN.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiMN: () => (/* binding */ apiMN)\n/* harmony export */ });\nconst API_BASE_URL = \"https://wr8q0kdx-5000.asse.devtunnels.ms\" || 0;\nconst API_BASE_URL2 = \"http://localhost:4000\" || 0;\nconst getUserId = ()=>{\n    if (true) {\n        let userId = localStorage.getItem('userId');\n        if (!userId) {\n            userId = Math.random().toString(36).substring(2);\n            localStorage.setItem('userId', userId);\n        }\n        return userId;\n    }\n    return 'default-user';\n};\nconst apiMN = {\n    getLottery: async (station, date, tinh, dayof)=>{\n        let url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn\");\n        if (dayof) {\n            if (!dayof || dayof.trim() === '') {\n                throw new Error('dayOfWeek cannot be empty');\n            }\n            url = \"\".concat(API_BASE_URL, \"/api/ketqua/\").concat(station, \"/\").concat(dayof);\n        } else if (station && date) {\n            if (!station || !date || station.trim() === '' || date.trim() === '') {\n                throw new Error('Station and date cannot be empty');\n            }\n            url = \"\".concat(API_BASE_URL, \"/api/ketqua/\").concat(station, \"-\").concat(date);\n        } else if (station && tinh) {\n            if (!station || !tinh || station.trim() === '' || tinh.trim() === '') {\n                throw new Error('Station and tinh cannot be empty');\n            }\n            url = \"\".concat(API_BASE_URL, \"/api/ketqua/\").concat(station, \"/tinh/\").concat(tinh);\n        } else {\n            url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn\");\n        }\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            throw new Error('KHÔNG GỌI ĐƯỢC API VÌ KHÔNG CÓ DỮ LIỆU HOẶC LỖI....');\n        }\n        return response.json();\n    },\n    getLoGanStats: async (days, tinh)=>{\n        if (!days || ![\n            '6',\n            '7',\n            '14',\n            '30',\n            '60'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 6, 7, 14, 30, 60.');\n        }\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Nam');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn/statistics/gan?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            throw new Error('KHÔNG GỌI ĐƯỢC API THỐNG KÊ LÔ GAN....');\n        }\n        return response.json();\n    },\n    getSpecialStats: async (days, tinh)=>{\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Nam');\n        }\n        if (!days || ![\n            '10',\n            '20',\n            '30',\n            '60',\n            '90',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 10, 20, 30, 60, 90, 365.');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn/statistics/special?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API VÌ KHÔNG CÓ DỮ LIỆU HOẶC LỖI....');\n        }\n        return response.json();\n    },\n    getDauDuoiStats: async (days, tinh)=>{\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Nam');\n        }\n        if (!days || ![\n            '30',\n            '60',\n            '90',\n            '120',\n            '180',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 30, 60, 90, 120, 180, 365.');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn/statistics/dau-duoi?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API VÌ KHÔNG CÓ DỮ LIỆU HOẶC LỖI....');\n        }\n        return response.json();\n    },\n    getDauDuoiStatsByDate: async (days, tinh)=>{\n        if (!days || ![\n            '30',\n            '60',\n            '90',\n            '120',\n            '180',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 30, 60, 90, 120, 180, 365.');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn/statistics/dau-duoi-by-date?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API VÌ KHÔNG CÓ DỮ LIỆU HOẶC LỖI....');\n        }\n        return response.json();\n    },\n    getSpecialStatsByWeek: async (month, year, tinh)=>{\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Nam');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn/statistics/special-by-week?month=\").concat(month, \"&year=\").concat(year, \"&tinh=\").concat(tinh);\n        try {\n            const response = await fetch(url, {\n                cache: 'no-store',\n                headers: {\n                    'Cache-Control': 'no-cache',\n                    'x-user-id': getUserId()\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || \"Lỗi khi gọi API: \".concat(response.status, \" - \").concat(response.statusText));\n            }\n            const data = await response.json();\n            console.log('Dữ liệu từ API getSpecialStatsByWeek (Miền Nam):', data);\n            return data;\n        } catch (error) {\n            console.error('Lỗi khi lấy thống kê giải đặc biệt theo tuần (Miền Nam):', error);\n            throw new Error('Không thể tải thống kê giải đặc biệt theo tuần, vui lòng thử lại sau');\n        }\n    },\n    getTanSuatLotoStats: async (days, tinh)=>{\n        if (!days || ![\n            '30',\n            '60',\n            '90',\n            '120',\n            '180',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 30, 60, 90, 120, 180, 365.');\n        }\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Nam');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn/statistics/tan-suat-loto?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API THỐNG KÊ TẦN SUẤT LOTO....');\n        }\n        return response.json();\n    },\n    getTanSuatLoCapStats: async (days, tinh)=>{\n        if (!days || ![\n            '30',\n            '60',\n            '90',\n            '120',\n            '180',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 30, 60, 90, 120, 180, 365.');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketqua/xsmn/statistics/tan-suat-lo-cap?days=\").concat(days, \"&tinh=\").concat(tinh);\n        console.log('Calling API:', url);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API THỐNG KÊ TẦN SUẤT LÔ CẶP....');\n        }\n        return response.json();\n    },\n    triggerScraper: async (date, station, provinces)=>{\n        if (!date || !station || date.trim() === '' || station.trim() === '') {\n            throw new Error('Date and station cannot be empty');\n        }\n        if (!provinces || !Array.isArray(provinces) || provinces.length === 0) {\n            throw new Error('Provinces must be a non-empty array');\n        }\n        const url = \"\".concat(API_BASE_URL2, \"/api/scraperMN/scrape\");\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-user-id': getUserId()\n                },\n                body: JSON.stringify({\n                    date,\n                    station,\n                    provinces\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Lỗi khi gọi API scraper: \".concat(response.status, \" - \").concat(response.statusText));\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Lỗi khi kích hoạt scraper:', error);\n            throw new Error('Không thể kích hoạt scraper, vui lòng thử lại sau');\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/api/kqxs/kqxsMN.js\n"));

/***/ }),

/***/ "(pages-dir-browser)/./pages/api/kqxs/kqxsMT.js":
/*!**********************************!*\
  !*** ./pages/api/kqxs/kqxsMT.js ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiMT: () => (/* binding */ apiMT)\n/* harmony export */ });\nconst API_BASE_URL = \"https://wr8q0kdx-5000.asse.devtunnels.ms\" || 0;\nconst API_BASE_URL2 = \"http://localhost:4000\" || 0;\n// Hàm tạo userId ngẫu nhiên nếu không có hệ thống đăng nhập\nconst getUserId = ()=>{\n    if (true) {\n        let userId = localStorage.getItem('userId');\n        if (!userId) {\n            userId = Math.random().toString(36).substring(2);\n            localStorage.setItem('userId', userId);\n        }\n        return userId;\n    }\n    return 'default-user';\n};\nconst apiMT = {\n    getLottery: async (station, date, tinh, dayof)=>{\n        let url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt\");\n        if (dayof) {\n            if (!dayof || dayof.trim() === '') {\n                throw new Error('dayOfWeek cannot be empty');\n            }\n            url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/\").concat(dayof);\n        } else if (station && date) {\n            if (!station || !date || station.trim() === '' || date.trim() === '') {\n                throw new Error('Station and date cannot be empty');\n            }\n            url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/\").concat(station, \"-\").concat(date);\n        } else if (station && tinh) {\n            if (!station || !tinh || station.trim() === '' || tinh.trim() === '') {\n                throw new Error('Station and date cannot be empty');\n            }\n            url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/\").concat(station, \"/tinh/\").concat(tinh);\n        } else {\n            url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt\");\n        }\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            throw new Error('KHÔNG GỌI ĐƯỢC API VÌ KHÔNG CÓ DỮ LIỆU HOẶC LỖI....');\n        }\n        return response.json();\n    },\n    getLoGanStats: async (days, tinh)=>{\n        if (!days || ![\n            '6',\n            '7',\n            '14',\n            '30',\n            '60'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 6, 7, 14, 30, 60.');\n        }\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Trung');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/statistics/gan?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            throw new Error('KHÔNG GỌI ĐƯỢC API THỐNG KÊ LÔ GAN....');\n        }\n        return response.json();\n    },\n    getSpecialStats: async (days, tinh)=>{\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Trung');\n        }\n        if (!days || ![\n            '10',\n            '20',\n            '30',\n            '60',\n            '90',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 6, 7, 10, 15, 20, 30.');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/statistics/special?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API VÌ KHÔNG CÓ DỮ LIỆU HOẶC LỖI....');\n        }\n        return response.json();\n    },\n    getDauDuoiStats: async (days, tinh)=>{\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Trung');\n        }\n        if (!days || ![\n            '30',\n            '60',\n            '120',\n            '180',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 30, 60.');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/statistics/dau-duoi?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API VÌ KHÔNG CÓ DỮ LIỆU HOẶC LỖI....');\n        }\n        return response.json();\n    },\n    getDauDuoiStatsByDate: async (days, tinh)=>{\n        if (!days || ![\n            '30',\n            '60',\n            '90',\n            '120',\n            '180',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 30, 60.');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/statistics/dau-duoi-by-date?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API VÌ KHÔNG CÓ DỮ LIỆU HOẶC LỖI....');\n        }\n        return response.json();\n    },\n    getSpecialStatsByWeek: async (month, year, tinh)=>{\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Trung');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/statistics/special-by-week?month=\").concat(month, \"&year=\").concat(year, \"&tinh=\").concat(tinh);\n        try {\n            const response = await fetch(url, {\n                cache: 'no-store',\n                headers: {\n                    'Cache-Control': 'no-cache',\n                    'x-user-id': getUserId()\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || \"Lỗi khi gọi API: \".concat(response.status, \" - \").concat(response.statusText));\n            }\n            const data = await response.json();\n            console.log('Dữ liệu từ API getSpecialStatsByWeek (Miền Trung):', data);\n            return data;\n        } catch (error) {\n            console.error('Lỗi khi lấy thống kê giải đặc biệt theo tuần (Miền Trung):', error);\n            throw new Error('Không thể tải thống kê giải đặc biệt theo tuần, vui lòng thử lại sau');\n        }\n    },\n    getTanSuatLotoStats: async (days, tinh)=>{\n        if (!days || ![\n            '30',\n            '60',\n            '90',\n            '120',\n            '180',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 30, 60, 90, 120, 180, 365.');\n        }\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Trung');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/statistics/tan-suat-loto?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API THỐNG KÊ TẦN SUẤT LOTO....');\n        }\n        return response.json();\n    },\n    getTanSuatLoCapStats: async (days, tinh)=>{\n        if (!days || ![\n            '30',\n            '60',\n            '90',\n            '120',\n            '180',\n            '365'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 30, 60, 90, 120, 180, 365.');\n        }\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Trung');\n        }\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/statistics/tan-suat-lo-cap?days=\").concat(days, \"&tinh=\").concat(tinh);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || 'KHÔNG GỌI ĐƯỢC API THỐNG KÊ TẦN SUẤT LÔ CẶP....');\n        }\n        return response.json();\n    },\n    triggerScraper: async (date, station)=>{\n        if (!date || !station || date.trim() === '' || station.trim() === '') {\n            throw new Error('Date and station cannot be empty');\n        }\n        const url = \"\".concat(API_BASE_URL2, \"/api/scraperMT/scrape\");\n        try {\n            const response = await fetch(url, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-user-id': getUserId()\n                },\n                body: JSON.stringify({\n                    date,\n                    station\n                })\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || \"Lỗi khi gọi API scraper: \".concat(response.status, \" - \").concat(response.statusText));\n            }\n            const data = await response.json();\n            return data;\n        } catch (error) {\n            console.error('Lỗi khi kích hoạt scraper:', error);\n            throw new Error('Không thể kích hoạt scraper, vui lòng thử lại sau');\n        }\n    },\n    getProvinces: async (date)=>{\n        if (!date || date.trim() === '') {\n            throw new Error('Date cannot be empty');\n        }\n        const currentTime = new Date();\n        const thresholdTime = new Date(currentTime);\n        thresholdTime.setHours(18, 30, 0, 0); // Đồng bộ với 17h35\n        const isAfterResultTime = currentTime > thresholdTime;\n        const targetDate = isAfterResultTime ? moment(date, 'DD/MM/YYYY').add(1, 'days').format('DD/MM/YYYY') : date;\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/provinces?date=\").concat(targetDate);\n        const response = await fetch(url, {\n            cache: 'no-store',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'x-user-id': getUserId()\n            }\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.error || \"KH\\xd4NG GỌI ĐƯỢC API DANH S\\xc1CH TỈNH. Gợi \\xfd ng\\xe0y: \".concat(moment().format('DD/MM/YYYY')));\n        }\n        const provinces = await response.json();\n        if (!provinces || provinces.length === 0) {\n            throw new Error(\"Kh\\xf4ng t\\xecm thấy tỉnh cho ng\\xe0y \".concat(targetDate, \". Vui l\\xf2ng thử lại với ng\\xe0y kh\\xe1c hoặc gợi \\xfd: \").concat(moment().format('DD/MM/YYYY')));\n        }\n        return provinces;\n    },\n    getBachThuMT: async (date, days, tinh)=>{\n        if (!date || date.trim() === '') {\n            throw new Error('Date cannot be empty');\n        }\n        if (!days || ![\n            '3',\n            '5',\n            '7',\n            '10',\n            '14'\n        ].includes(days.toString())) {\n            throw new Error('Invalid days parameter. Valid options are: 3, 5, 7, 10, 14.');\n        }\n        if (!tinh || tinh.trim() === '') {\n            throw new Error('Tinh cannot be empty for Miền Trung');\n        }\n        const currentTime = new Date();\n        const thresholdTime = new Date(currentTime);\n        thresholdTime.setHours(18, 30, 0, 0); // Đồng bộ với 17h35\n        const isAfterResultTime = currentTime > thresholdTime;\n        const targetDate = isAfterResultTime ? moment(date, 'DD/MM/YYYY').add(1, 'days').format('DD/MM/YYYY') : date;\n        const url = \"\".concat(API_BASE_URL, \"/api/ketquaxs/xsmt/soicau/soi-cau-bach-thu?date=\").concat(targetDate, \"&days=\").concat(days, \"&tinh=\").concat(tinh);\n        try {\n            const response = await fetch(url, {\n                cache: 'no-store',\n                headers: {\n                    'Cache-Control': 'no-cache',\n                    'x-user-id': getUserId()\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.error || \"Lỗi khi gọi API soi cầu bạch thủ: \".concat(response.status, \" - \").concat(response.statusText));\n            }\n            const data = await response.json();\n            console.log('Dữ liệu từ API soi cầu bạch thủ XSMT:', data);\n            return data;\n        } catch (error) {\n            console.error('Lỗi khi lấy dữ liệu soi cầu bạch thủ XSMT:', error);\n            throw new Error('Không thể tải dữ liệu soi cầu, vui lòng thử lại sau');\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./pages/api/kqxs/kqxsMT.js\n"));

/***/ })

});